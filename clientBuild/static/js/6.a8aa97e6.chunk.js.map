{"version":3,"sources":["components/FullMessage/FullMessage.module.css","components/FullMessage/FullMessage.js"],"names":["module","exports","withRouter","props","currentMessage","useSelector","state","message","history","location","passedMessage","error","dispatch","useDispatch","id","useParams","useEffect","fetchMessage","resetMessage","messageBody","Object","keys","length","date","Date","createdAt","toDateString","className","styles","MessageAttribute","who","name","MessageDate","MessageMessage","parse","identity","style","color","fontWeight"],"mappings":"+GACAA,EAAOC,QAAU,CAAC,iBAAmB,sCAAsC,YAAc,mC,iCCDzF,8FAmEeC,uBA3DK,SAACC,GACnB,IAAMC,EAAiBC,aAAY,SAACC,GAAD,OAAWA,EAAMC,QAAQH,kBACtDG,EAAUH,GAEZD,EAAMK,QAAQC,SAASC,cACrBC,EAAQN,aAAY,SAACC,GAAD,OAAWA,EAAMC,QAAQI,SAC7CC,EAAWC,cACTC,EAAOC,cAAPD,GAERE,qBAAU,WAKR,OAJsBb,EAAMK,QAAQC,SAASC,eAE3CE,EAASK,YAAaH,IAEjB,kBAAMF,EAASM,kBACrB,CAACJ,EAAIF,IAER,IAAIO,EAAc,kBAAC,IAAD,MAElB,GAAIZ,GAAWa,OAAOC,KAAKd,GAASe,OAAS,EAAG,CAC9C,IAAMC,EAAO,IAAIC,KAAKjB,EAAQkB,WAAWC,eACzCP,EACE,oCACE,2BACE,mCACQ,IACN,0BAAMQ,UAAWC,IAAOC,kBAAmBtB,EAAQuB,IAAIC,OAH3D,IAME,6BACA,0BAAMJ,UAAWC,IAAOI,aAAcT,IAExC,0BAAMI,UAAWC,IAAOK,gBAAiBC,IAAM3B,EAAQA,UACvD,2BACE,uCACY,IACV,0BAAMoB,UAAWC,IAAOC,kBACrBtB,EAAQ4B,SAASJ,SAmB9B,OAXIpB,IACFQ,EACE,gCACE,0BAAMiB,MAAO,CAAEC,MAAO,MAAOC,WAAY,SAAzC,0DAGA,0BAAMF,MAAO,CAAEC,MAAO,UAAtB,IAAmC1B,KAKlC,6BAAMQ","file":"static/js/6.a8aa97e6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"MessageAttribute\":\"FullMessage_MessageAttribute__1D3WK\",\"MessageDate\":\"FullMessage_MessageDate__38tD1\"};","import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport parse from \"html-react-parser\";\nimport styles from \"./FullMessage.module.css\";\nimport { fetchMessage, resetMessage } from \"../../store/actions\";\nimport { useParams, withRouter } from \"react-router-dom\";\nimport Spinner from \"../UI/Spinners/FormSpinner/FormSpinner\";\n\nconst FullMessage = (props) => {\n  const currentMessage = useSelector((state) => state.message.currentMessage);\n  const message = currentMessage\n    ? currentMessage\n    : props.history.location.passedMessage;\n  const error = useSelector((state) => state.message.error);\n  const dispatch = useDispatch();\n  const { id } = useParams();\n\n  useEffect(() => {\n    const passedMessage = props.history.location.passedMessage;\n    if (!passedMessage) {\n      dispatch(fetchMessage(id));\n    }\n    return () => dispatch(resetMessage());\n  }, [id, dispatch]);\n\n  let messageBody = <Spinner />;\n\n  if (message && Object.keys(message).length > 0) {\n    const date = new Date(message.createdAt).toDateString();\n    messageBody = (\n      <>\n        <p>\n          <b>\n            To my{\" \"}\n            <span className={styles.MessageAttribute}>{message.who.name}</span>\n          </b>\n          ,\n          <br />\n          <span className={styles.MessageDate}>{date}</span>\n        </p>\n        <span className={styles.MessageMessage}>{parse(message.message)}</span>\n        <p>\n          <b>\n            From your{\" \"}\n            <span className={styles.MessageAttribute}>\n              {message.identity.name}\n            </span>\n          </b>\n        </p>\n      </>\n    );\n  }\n\n  if (error) {\n    messageBody = (\n      <center>\n        <span style={{ color: \"red\", fontWeight: \"bold\" }}>\n          Sorry, an error has occurred and IT has been notified:\n        </span>\n        <span style={{ color: \"white\" }}> {error}</span>\n      </center>\n    );\n  }\n\n  return <div>{messageBody}</div>;\n};\n\nexport default withRouter(FullMessage);\n"],"sourceRoot":""}