{"version":3,"sources":["components/UI/FormSpinner/FormSpinner.js","components/UI/FormSpinner/FormSpinner.module.css","containers/FullMessagePage/FullMessagePage.module.css","components/MessageInfoHeader/MessageInfoHeader.module.css","components/MessageForm/MessageForm.module.css","components/MessageInfoHeader/MessageInfoHeader.js","components/MessageForm/MessageForm.js","containers/FullMessagePage/FullMessagePage.js"],"names":["Spinner","className","styles","loader","module","exports","MessageInfoHeader","props","message","dispatch","useDispatch","approveHandler","a","approveMessage","id","user","token","fetchMessage","fetchMessages","approved","flagged","icon","faFlag","size","style","color","modifiedBy","faEdit","User","email","Date","updatedAt","toDateString","faCheck","approvedBy","faTimes","onClick","link","initialState","who","name","identity","formReducer","formState","action","type","value","MessageForm","useReducer","dispatchForm","persons","useSelector","state","sort","b","position","editLoading","setValidations","useEffect","_id","onChangePersonHandler","split","validateForm","failures","length","submitHandler","editMessage","whoDropdown","onChange","event","target","map","person","index","key","selected","identityDropdown","buttonText","FormSpinner","Form","Col","sm","MessageWrapper","editor","BalloonEditor","data","config","toolbar","getData","Button","variant","disabled","withRouter","useState","validations","setMessage","location","passedMessage","setPassedMessage","currentMessage","auth","editSuccess","approveSuccess","fetchLoading","approveLoading","error","useParams","editMessageReset","editMessageForm","messageInfoHeader","join","success","Container","Jumbotron"],"mappings":"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","file":"static/js/16.82590d1d.chunk.js","sourcesContent":["import React from \"react\";\nimport styles from \"./FormSpinner.module.css\";\n\nconst Spinner = () => {\n  return <div className={styles.loader}></div>;\n};\n\nexport default Spinner;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"FormSpinner_loader__1L2La\",\"load1\":\"FormSpinner_load1__NnjDF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"validations\":\"FullMessagePage_validations__38plK\",\"success\":\"FullMessagePage_success__3gLvv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"MessageInfoHeader_link__328n_\",\"User\":\"MessageInfoHeader_User__3l1ni\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MessageWrapper\":\"MessageForm_MessageWrapper__2OJGj\"};","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport styles from \"./MessageInfoHeader.module.css\";\nimport {\n  approveMessage,\n  fetchMessage,\n  fetchMessages,\n} from \"../../store/actions\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFlag } from \"@fortawesome/free-solid-svg-icons\";\nimport { faCheck } from \"@fortawesome/free-solid-svg-icons\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { faEdit } from \"@fortawesome/free-solid-svg-icons\";\n\nconst MessageInfoHeader = (props) => {\n  const { message } = props;\n  const dispatch = useDispatch();\n\n  const approveHandler = async () => {\n    await dispatch(\n      approveMessage({ id: props.id, user: props.user, token: props.token })\n    );\n    await dispatch(fetchMessage(props.id));\n    await dispatch(fetchMessages());\n  };\n\n  let approved = null;\n\n  const flagged =\n    message && message.flagged ? (\n      <>\n        <b>Flagged:</b>{\" \"}\n        <FontAwesomeIcon icon={faFlag} size={\"1x\"} style={{ color: \"red\" }} />\n        <br />\n      </>\n    ) : null;\n\n  const modifiedBy =\n    message && message.modifiedBy ? (\n      <>\n        <b>\n          Modified{\" \"}\n          <FontAwesomeIcon\n            icon={faEdit}\n            size={\"1x\"}\n            style={{ color: \"orange\" }}\n          />{\" \"}\n          by <span className={styles.User}> {message.modifiedBy.email}</span> on{\" \"}\n          {new Date(message.updatedAt).toDateString()}\n        </b>\n      </>\n    ) : null;\n\n  if (message && message.approved) {\n    approved = (\n      <>\n        <b>\n          Approved{\" \"}\n          <FontAwesomeIcon\n            icon={faCheck}\n            size={\"1x\"}\n            style={{ color: \"green\" }}\n          />{\" \"}\n          by <span className={styles.User}>{message.approvedBy.email}</span>\n        </b>\n        <br />\n        <br />\n      </>\n    );\n  } else if (message && !message.approved) {\n    approved = (\n      <>\n        <b>Not approved </b>{\" \"}\n        <FontAwesomeIcon icon={faTimes} size={\"lg\"} style={{ color: \"red\" }} />{\" \"}\n        <br />\n        <span onClick={() => approveHandler()} className={styles.link}>\n          <b>Approve?</b>\n        </span>\n        <br />\n        <br />\n      </>\n    );\n  }\n\n  return (\n    <>\n      {flagged}\n      {approved}\n      {modifiedBy}\n\n      <hr />\n    </>\n  );\n};\n\nexport default MessageInfoHeader;\n","import React, { useReducer, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styles from \"./MessageForm.module.css\";\nimport CKEditor from \"@ckeditor/ckeditor5-react\";\nimport BalloonEditor from \"@ckeditor/ckeditor5-build-balloon\";\nimport Form from \"react-bootstrap/Form\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport FormSpinner from \"../UI/FormSpinner/FormSpinner\";\nimport { editMessage } from \"../../store/actions\";\n\nconst initialState = {\n  who: { name: \"\", id: \"\" },\n  identity: { name: \"\", id: \"\" },\n  message: \"\",\n};\n\nconst formReducer = (formState, action) => {\n  switch (action.type) {\n    case \"who\":\n      return {\n        ...formState,\n        who: {\n          ...formState.who,\n          ...action.value,\n        },\n      };\n    case \"identity\":\n      return {\n        ...formState,\n        identity: {\n          ...formState.identity,\n          ...action.value,\n        },\n      };\n    case \"message\":\n      return {\n        ...formState,\n        message: action.value,\n      };\n    case \"reset\":\n      return {\n        ...initialState,\n      };\n\n    default:\n      break;\n  }\n};\n\nconst MessageForm = (props) => {\n  const [formState, dispatchForm] = useReducer(formReducer, initialState);\n  const persons = useSelector((state) => state.persons.persons).sort(\n    (a, b) => a.position - b.position\n  );\n  const editLoading = useSelector((state) => state.message.editLoading);\n\n  const dispatch = useDispatch();\n\n  const { setValidations, message, token, id, user } = props;\n\n  useEffect(() => {\n    if (message) {\n      dispatchForm({\n        type: \"message\",\n        value: message.message,\n      });\n      dispatchForm({\n        type: \"who\",\n        value: { name: message.who.name, id: message.who._id },\n      });\n      dispatchForm({\n        type: \"identity\",\n        value: { name: message.identity.name, id: message.identity._id },\n      });\n    }\n    return () => dispatchForm({ type: \"reset\" });\n  }, [id, message]);\n\n  const onChangeEditor = (event, editor) => {\n    const data = editor.getData();\n    dispatchForm({\n      type: \"message\",\n      value: data,\n    });\n  };\n\n  const onChangePersonHandler = (type, value) => {\n    const [name, id] = value.split(\",\");\n    dispatchForm({\n      type,\n      value: { name, id },\n    });\n  };\n\n  const validateForm = () => {\n    let failures = [];\n\n    if (!formState.message || !formState.who.id || !formState.identity.id) {\n      failures = [...failures, \"Make sure no fields are blank\"];\n    }\n\n    if (failures.length > 0) {\n      setValidations(failures);\n      return false;\n    } else {\n      setValidations(null);\n      return true;\n    }\n  };\n\n  const submitHandler = async () => {\n    const validated = validateForm();\n    if (validated) {\n      await dispatch(\n        editMessage({\n          message: formState.message,\n          who: formState.who.id,\n          identity: formState.identity.id,\n          token,\n          id,\n          flagged: message.flagged,\n          approved: message.approved,\n          approvedBy: message.approvedBy,\n          modifiedBy: user.id,\n        })\n      );\n    }\n  };\n\n  const whoDropdown = (\n    <select\n      onChange={(event) => onChangePersonHandler(\"who\", event.target.value)}\n    >\n      {persons.map((person, index) => (\n        <option\n          key={index}\n          selected={formState.who.id === person._id ? \"selected\" : null}\n          value={`${person.name},${person._id}`}\n        >\n          {person.name}\n        </option>\n      ))}\n    </select>\n  );\n\n  const identityDropdown = (\n    <select\n      onChange={(event) =>\n        onChangePersonHandler(\"identity\", event.target.value)\n      }\n    >\n      {persons.map((person, index) => (\n        <option\n          selected={formState.identity.id === person._id ? \"selected\" : null}\n          key={index}\n          value={`${person.name},${person._id}`}\n        >\n          {person.name}\n        </option>\n      ))}\n    </select>\n  );\n\n  const buttonText = editLoading ? <FormSpinner /> : \"Submit\";\n\n  return (\n    <>\n      <Form>\n        <Col sm=\"13\">\n          <b>Who:</b> {whoDropdown}\n          <br />\n          <br />\n        </Col>\n        <Col sm=\"13\">\n          <b>Message:</b>\n          <div className={styles.MessageWrapper}>\n            <CKEditor\n              editor={BalloonEditor}\n              data={formState.message}\n              config={{\n                toolbar: [\"bold\", \"italic\", \"|\", \"undo\", \"redo\"],\n              }}\n              onChange={onChangeEditor}\n            />\n          </div>\n          <br />\n        </Col>\n        <Col sm=\"13\">\n          <b>Identity:</b> {identityDropdown}\n          <br />\n        </Col>\n      </Form>\n      <center>\n        <br />\n        <Button\n          variant=\"primary\"\n          disabled={editLoading ? true : false}\n          onClick={() => submitHandler()}\n        >\n          {buttonText}\n        </Button>\n      </center>\n    </>\n  );\n};\n\nexport default MessageForm;\n","import React, { useEffect, useState } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { editMessageReset, fetchMessage } from \"../../store/actions\";\nimport { useParams } from \"react-router-dom\";\nimport styles from \"./FullMessagePage.module.css\";\nimport MessageInfoHeader from \"../../components/MessageInfoHeader/MessageInfoHeader\";\nimport MessageForm from \"../../components/MessageForm/MessageForm\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Container from \"react-bootstrap/Container\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\n\nconst FullMessagePage = (props) => {\n  const [validations, setValidations] = useState(null);\n  const [message, setMessage] = useState(null);\n  const [passedMessage, setPassedMessage] = useState(\n    props.location.passedMessage\n  );\n  const currentMessage = useSelector((state) => state.message.currentMessage);\n  const token = useSelector((state) => state.auth.token);\n  const user = useSelector((state) => state.auth.user);\n  const editSuccess = useSelector((state) => state.message.editSuccess);\n  const approveSuccess = useSelector((state) => state.message.approveSuccess);\n  const fetchLoading = useSelector((state) => state.message.editLoading);\n  const approveLoading = useSelector((state) => state.message.approveLoading);\n  const error = useSelector((state) => state.message.error);\n\n  const { id } = useParams();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    return () => dispatch(editMessageReset());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (!currentMessage && !passedMessage && id) {\n      dispatch(fetchMessage(id));\n    } else {\n      const populatedMessage = currentMessage ? currentMessage : passedMessage;\n      setMessage(populatedMessage);\n    }\n  }, [dispatch, id, currentMessage, passedMessage]);\n\n  useEffect(() => {\n    if (currentMessage && passedMessage) {\n      setPassedMessage(null);\n    }\n  }, [currentMessage, passedMessage]);\n\n  let editMessageForm = null;\n\n  let messageInfoHeader = null;\n\n  if (!currentMessage && !passedMessage && error) {\n    editMessageForm = (\n      <center>\n        <span className={styles.validations}>ERROR: {error}</span>\n      </center>\n    );\n  } else if (fetchLoading) {\n    editMessageForm = <Spinner />;\n  } else {\n    editMessageForm = (\n      <>\n        <MessageForm\n          user={user}\n          token={token}\n          id={id}\n          setValidations={setValidations}\n          message={message}\n        />\n        <br />\n        <center>\n          <span className={styles.validations}>\n            {validations ? (\n              <>\n                {validations.join(\", \")} <br />\n              </>\n            ) : null}\n\n            {error}\n          </span>\n          <span className={styles.success}>\n            {editSuccess && !validations ? \"SUCCESS! Message updated.\" : null}\n            {approveSuccess ? \"SUCCESS! Message approved.\" : null}\n          </span>\n        </center>\n      </>\n    );\n  }\n\n  if (fetchLoading || approveLoading) {\n    messageInfoHeader = <Spinner />;\n  } else {\n    messageInfoHeader = (\n      <MessageInfoHeader user={user} token={token} id={id} message={message} />\n    );\n  }\n\n  return (\n    <Container>\n      <Jumbotron>\n        <center>\n          <h1>Edit Message</h1>\n        </center>\n        <br />\n        {messageInfoHeader}\n        {editMessageForm}\n      </Jumbotron>\n    </Container>\n  );\n};\n\nexport default withRouter(FullMessagePage);\n"],"sourceRoot":""}