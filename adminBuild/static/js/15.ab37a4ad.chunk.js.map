{"version":3,"sources":["components/UI/FormSpinner/FormSpinner.js","components/UI/FormSpinner/FormSpinner.module.css","components/UI/Modal/Modal.js","containers/MessagesPage/MessagesPage.module.css","components/Messages/Message/Message.module.css","components/MessageFilterSortOptions/SortOption/SortOption.module.css","components/Messages/Message/Message.js","components/Messages/LoadMore/LoadMoreButton/LoadMoreButton.js","components/Messages/LoadMore/LoadMore.js","components/Messages/Messages.js","components/MessageFilterSortOptions/SortOption/SortOption.js","components/MessageFilterSortOptions/FilterSortOptions.js","containers/FilterSort/FilterSort.js","containers/MessagesPage/MessagesPage.js"],"names":["Spinner","className","styles","loader","module","exports","ModalContainer","props","personSuccess","useSelector","state","person","messageSuccess","message","resourceSuccess","resource","deleteResourceSuccess","deletePersonLoading","deleteLoading","deleteResourceLoading","deleteMessageLoading","deleteMessageError","error","deletePersonError","deleteResourceError","buttonText","colorStatus","show","onHide","cancelHandler","backdrop","keyboard","Header","closeButton","Title","title","Body","children","Footer","variant","onClick","acceptHandler","itemId","type","withRouter","useState","count","setCount","user","auth","token","approveLoading","approveHandler","selectorHandler","id","history","push","pathname","passedMessage","entry","date","Date","createdAt","toDateString","flag","flagged","icon","faFlag","size","buttons","Button","_id","Icon","deleteHandler","Flag","messageBody","Message","messageLength","length","Icons","MessageAttribute","who","name","MessageDate","MessageMessage","parse","newBody","split","lastEl","slice","indexOf","join","summaryMessage","identity","LoadMoreButton","loadMessages","loadMoreMessages","LoadMore","messagesCutoff","setMessagesCutoff","filteredCutoff","setFilteredCutoff","approvedCutoff","setApprovedCutoff","filteredApprovedCutoff","setFilteredApprovedCutoff","filteredCalculation","filteredMessages","messageCalculation","messages","filteredApprovedCalculation","approvedCalculation","loadMoreFilteredMessages","marker","prevState","loadedMessages","filteredMarker","map","index","key","ListGroup","Item","style","borderColor","messagesMarker","Messages","setShow","messageId","setMessageId","filteredApproved","pendingMessages","filteredPending","approvedMessages","dispatch","useDispatch","selectHandler","editMessageReset","a","deleteMessage","fetchMessages","sortPending","sortApproved","payload","approveMessage","loadMore","msg","modalBody","Modal","SortOption","selected","setSelected","sort","filter","sortHandler","sortSelected","useEffect","addSortPending","removeSortPending","addSortApproved","removeSortApproved","SortOptionSelected","FilterSortOptions","pendingSortSelected","setPendingSortSelected","approvedSortSelected","setApprovedSortSelected","pendingSortOptions","array","approvedSortOptions","optionsBody","faClock","color","Row","Col","lg","Container","FilterSort","MessagePage","messageType","setMessageType","approveSuccess","deleteSuccess","approveMessageReset","deleteMessageReset","messageTypeHandler","sortReset","link","pendingClasses","allClasses","Jumbotron","validations","success"],"mappings":"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","file":"static/js/15.ab37a4ad.chunk.js","sourcesContent":["import React from \"react\";\nimport styles from \"./FormSpinner.module.css\";\n\nconst Spinner = () => {\n  return <div className={styles.loader}></div>;\n};\n\nexport default Spinner;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"FormSpinner_loader__1L2La\",\"load1\":\"FormSpinner_load1__NnjDF\"};","import React from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport FormSpinner from \"../FormSpinner/FormSpinner\";\nimport { useSelector } from \"react-redux\";\n\nconst ModalContainer = (props) => {\n  const personSuccess = useSelector((state) => state.person.personSuccess);\n  const messageSuccess = useSelector((state) => state.message.messageSuccess);\n  const resourceSuccess = useSelector(\n    (state) => state.resource.deleteResourceSuccess\n  );\n  const deletePersonLoading = useSelector(\n    (state) => state.person.deleteLoading\n  );\n  const deleteResourceLoading = useSelector(\n    (state) => state.resource.deleteLoading\n  );\n  const deleteMessageLoading = useSelector(\n    (state) => state.message.deleteLoading\n  );\n  const deleteMessageError = useSelector((state) => state.message.error);\n\n  const deletePersonError = useSelector((state) => state.person.error);\n  const deleteResourceError = useSelector((state) => state.resource.error);\n\n  let buttonText = \"Understood\";\n\n  let colorStatus = \"primary\";\n\n  if (deletePersonLoading || deleteResourceLoading || deleteMessageLoading) {\n    buttonText = <FormSpinner />;\n  } else if (personSuccess || resourceSuccess || messageSuccess) {\n    colorStatus = \"success\";\n    buttonText = \"Deleted\";\n  } else if (deletePersonError || deleteResourceError || deleteMessageError) {\n    colorStatus = \"danger\";\n    buttonText = \"Failed\";\n  }\n\n  return (\n    <Modal\n      show={props.show}\n      onHide={props.cancelHandler}\n      backdrop=\"static\"\n      keyboard={false}\n    >\n      <Modal.Header closeButton>\n        <Modal.Title>{props.title}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>{props.children}</Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={() => props.cancelHandler()}>\n          Close\n        </Button>\n        <Button\n          variant={colorStatus}\n          onClick={() => props.acceptHandler(props.itemId, props.type)}\n        >\n          {buttonText}\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\nexport default ModalContainer;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"MessagesPage_link__1D2ix\",\"selected\":\"MessagesPage_selected__2XSqc\",\"validations\":\"MessagesPage_validations__1BQzg\",\"success\":\"MessagesPage_success__2k103\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Message\":\"Message_Message__1KuaF\",\"MessageDate\":\"Message_MessageDate__zGEFi\",\"MessageAttribute\":\"Message_MessageAttribute__2zeAW\",\"MessageMessage\":\"Message_MessageMessage__378u6\",\"Flag\":\"Message_Flag__1O7Ji\",\"Icons\":\"Message_Icons__14Y_b\",\"Icon\":\"Message_Icon__zZ5YE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SortOption\":\"SortOption_SortOption__188pk\",\"SortOptionSelected\":\"SortOption_SortOptionSelected__2QOAw\"};","import React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport parse from \"html-react-parser\";\nimport { withRouter } from \"react-router-dom\";\nimport styles from \"./Message.module.css\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"../../UI/Spinner/Spinner\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFlag } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Message = (props) => {\n  const [count, setCount] = useState(100);\n  const user = useSelector((state) => state.auth.user);\n  const token = useSelector((state) => state.auth.token);\n  const approveLoading = useSelector((state) => state.message.approveLoading);\n  const { approveHandler } = props;\n\n  const selectorHandler = (id) => {\n    props.history.push({\n      pathname: `messages/${id}`,\n      passedMessage: props.entry,\n    });\n  };\n\n  const selectHandler = (messageLength) => {\n    if (count === messageLength) {\n      setCount(100);\n    } else {\n      setCount(messageLength);\n    }\n  };\n\n  const summaryMessage = (message, count) => {\n    const newBody = message.split(\" \");\n\n    if (newBody.length <= count) return message;\n\n    const lastEl = newBody[count - 1].split(\"\").slice(-1)[0];\n    const punctuation = [\".\", \"!\", \",\", \"?\", \";\", \":\", \"&\"];\n\n    if (punctuation.indexOf(lastEl) !== -1) {\n      return `${newBody.slice(0, count + 1).join(\" \")}...`;\n    }\n\n    return `${newBody.slice(0, count).join(\" \")}...`;\n  };\n\n  const date = new Date(props.entry.createdAt).toDateString();\n\n  const flag = props.entry.flagged ? (\n    <FontAwesomeIcon icon={faFlag} size={\"lg\"} />\n  ) : null;\n\n  let buttons = null;\n\n  if (props.type === \"pending\") {\n    buttons = (\n      <>\n        <Button\n          variant=\"success\"\n          onClick={() => approveHandler({ id: props.entry._id, user, token })}\n          className={styles.Icon}\n        >\n          Approve\n        </Button>\n        <Button\n          onClick={() => selectorHandler(props.entry._id)}\n          className={styles.Icon}\n          variant=\"secondary\"\n        >\n          Edit\n        </Button>\n        <Button\n          onClick={() => props.deleteHandler(props.entry._id)}\n          className={styles.Icon}\n          variant=\"danger\"\n        >\n          Delete\n        </Button>\n        <span className={styles.Flag}>{flag}</span>\n      </>\n    );\n  } else {\n    buttons = (\n      <>\n        <Button\n          onClick={() => selectorHandler(props.entry._id)}\n          className={styles.Icon}\n          variant=\"secondary\"\n        >\n          Edit\n        </Button>\n        <Button\n          onClick={() => props.deleteHandler(props.entry._id)}\n          className={styles.Icon}\n          variant=\"danger\"\n        >\n          Delete\n        </Button>\n      </>\n    );\n  }\n\n  const messageBody = approveLoading ? (\n    <Spinner />\n  ) : (\n    <div\n      className={styles.Message}\n      onClick={() => selectHandler(props.entry.message.length)}\n    >\n      <div className={styles.Icons}>{buttons}</div>\n      <p>\n        To my{\" \"}\n        <span className={styles.MessageAttribute}> {props.entry.who.name}</span>\n        ,\n        <br />\n        <span className={styles.MessageDate}>{date}</span>\n      </p>\n      <span className={styles.MessageMessage}>\n        {parse(summaryMessage(props.entry.message, count))}\n      </span>\n      <p>\n        From your{\" \"}\n        <span className={styles.MessageAttribute}>\n          {props.entry.identity.name}\n        </span>\n      </p>\n    </div>\n  );\n\n  return <>{messageBody}</>;\n};\n\nexport default withRouter(Message);\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\n\nconst LoadMoreButton = (props) => {\n  let loadMessages = null;\n\n  if (props.show) {\n    loadMessages = (\n      <Button onClick={() => props.loadMoreMessages(14)}>LOAD MORE</Button>\n    );\n  }\n  return loadMessages;\n};\n\nexport default LoadMoreButton;\n","import React, { useState } from \"react\";\nimport Message from \"../Message/Message\";\nimport LoadMoreButton from \"./LoadMoreButton/LoadMoreButton\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\n\n//in the future, if there were to be more than 1000 posts lets say, I would load 500 posts at a time (via the api), and use the\n//useEffect hook to call the api to load another 500 posts once messageCutoff reached a certain point (like 470)\n//to maximize efficiency and speed\n\nconst LoadMore = (props) => {\n  const [messagesCutoff, setMessagesCutoff] = useState(14);\n  const [filteredCutoff, setFilteredCutoff] = useState(14);\n\n  const [approvedCutoff, setApprovedCutoff] = useState(14);\n  const [filteredApprovedCutoff, setFilteredApprovedCutoff] = useState(14);\n\n  //calculate how many messages can be loaded that aren't already displayed\n  //if each respective value is greater than 0, the loadmore button should display\n  const filteredCalculation = props.filteredMessages\n    ? props.filteredMessages.length - filteredCutoff\n    : null;\n  const messageCalculation = props.messages\n    ? props.messages.length - messagesCutoff\n    : null;\n\n  const filteredApprovedCalculation = props.filteredMessages\n    ? props.filteredMessages.length - filteredApprovedCutoff\n    : null;\n  const approvedCalculation = props.messages\n    ? props.messages.length - approvedCutoff\n    : null;\n\n  //calculate the marker (the amount of posts to load... another 14, or if there are less than 14 left to load,\n  //the remaining amount) and set the cutoff\n  const loadMoreFilteredMessages = (count) => {\n    if (props.type === \"pending\") {\n      const marker = filteredCalculation >= count ? count : filteredCalculation;\n      setFilteredCutoff((prevState) => prevState + marker);\n    } else {\n      const marker =\n        filteredApprovedCalculation >= count\n          ? count\n          : filteredApprovedCalculation;\n      setFilteredApprovedCutoff((prevState) => prevState + marker);\n    }\n  };\n\n  const loadMoreMessages = (count) => {\n    if (props.type === \"pending\") {\n      const marker = messageCalculation >= count ? count : messageCalculation;\n      setMessagesCutoff((prevState) => prevState + marker);\n    } else {\n      const marker = approvedCalculation >= count ? count : approvedCalculation;\n      setApprovedCutoff((prevState) => prevState + marker);\n    }\n  };\n\n  let loadMessages = null;\n  let loadedMessages = null;\n\n  //display the loadmore for unfiltered messages, or display the loadmore (button and messages) for filtered messages.\n  if (props.filteredMessages && props.filteredMessages.length > 14) {\n    loadMessages =\n      props.type === \"pending\" ? (\n        <LoadMoreButton\n          show={filteredCalculation > 0}\n          loadMoreMessages={loadMoreFilteredMessages}\n        />\n      ) : (\n        <LoadMoreButton\n          show={filteredApprovedCalculation > 0}\n          loadMoreMessages={loadMoreFilteredMessages}\n        />\n      );\n\n    const filteredMarker =\n      props.type === \"pending\" ? filteredCutoff : filteredApprovedCutoff;\n\n    loadedMessages = props.filteredMessages\n      .slice(14, filteredMarker)\n      .map((message, index) => {\n        return (\n          <span key={index}>\n            <ListGroup.Item\n              style={{ borderColor: message.flagged ? \"red\" : null }}\n            >\n              <Message\n                key={index}\n                entry={message}\n                marker={index + 14}\n                deleteHandler={props.deleteHandler}\n                approveHandler={props.approveHandler}\n                type={props.type}\n              ></Message>\n            </ListGroup.Item>\n            <br />\n          </span>\n        );\n      });\n  } else if (props.messages && props.messages.length > 14) {\n    loadMessages =\n      props.type === \"pending\" ? (\n        <LoadMoreButton\n          show={messageCalculation > 0}\n          loadMoreMessages={loadMoreMessages}\n        />\n      ) : (\n        <LoadMoreButton\n          show={approvedCalculation > 0}\n          loadMoreMessages={loadMoreMessages}\n        />\n      );\n\n    const messagesMarker =\n      props.type === \"pending\" ? messagesCutoff : approvedCutoff;\n\n    loadedMessages = props.messages\n      .slice(14, messagesMarker)\n      .map((message, index) => {\n        return (\n          <span key={index}>\n            <ListGroup.Item\n              style={{ borderColor: message.flagged ? \"red\" : null }}\n            >\n              <Message\n                key={index}\n                entry={message}\n                marker={index + 14}\n                deleteHandler={props.deleteHandler}\n                approveHandler={props.approveHandler}\n                type={props.type}\n              ></Message>\n            </ListGroup.Item>\n            <br />\n          </span>\n        );\n      });\n  }\n\n  return (\n    <>\n      <ListGroup>{loadedMessages}</ListGroup>\n      <center>{loadMessages}</center>\n      <br />\n    </>\n  );\n};\n\nexport default LoadMore;\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  editMessageReset,\n  deleteMessage,\n  fetchMessages,\n  sortApproved,\n  approveMessage,\n  sortPending,\n} from \"../../store/actions\";\nimport Modal from \"../../components/UI/Modal/Modal\";\nimport LoadMore from \"./LoadMore/LoadMore\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport Message from \"./Message/Message\";\n\nconst Messages = (props) => {\n  const [show, setShow] = useState(false);\n  const [messageId, setMessageId] = useState(null);\n  const token = useSelector((state) => state.auth.token);\n\n  const {\n    type,\n    filteredApproved,\n    pendingMessages,\n    filteredPending,\n    approvedMessages,\n  } = props;\n\n  const dispatch = useDispatch();\n\n  const selectHandler = (id) => {\n    setMessageId(id);\n    dispatch(editMessageReset());\n    setShow(true);\n  };\n\n  const resetHandler = () => {\n    setShow(false);\n  };\n\n  const deleteHandler = async (id, type) => {\n    await dispatch(deleteMessage(id, token));\n    await dispatch(fetchMessages());\n    if (type === \"pending\") {\n      dispatch(sortPending());\n    } else if (type === \"approved\") {\n      dispatch(sortApproved());\n    }\n    setShow(false);\n  };\n\n  const approveHandler = async (payload) => {\n    await dispatch(approveMessage(payload));\n    await dispatch(fetchMessages());\n  };\n\n  let messages = null;\n  let loadMore = null;\n\n  if (type === \"pending\") {\n    loadMore = (\n      <LoadMore\n        messages={pendingMessages}\n        filteredMessages={filteredPending}\n        approveHandler={approveHandler}\n        type={type}\n      />\n    );\n    if (filteredPending.length > 0) {\n      messages = filteredPending.slice(0, 14).map((msg, index) => {\n        return (\n          <span key={index}>\n            <ListGroup.Item style={{ borderColor: msg.flagged ? \"red\" : null }}>\n              <Message\n                entry={msg}\n                deleteHandler={selectHandler}\n                approveHandler={approveHandler}\n                type={type}\n              />\n            </ListGroup.Item>\n            <br />\n          </span>\n        );\n      });\n    } else {\n      messages =\n        pendingMessages && pendingMessages.length > 0\n          ? pendingMessages.slice(0, 14).map((msg, index) => {\n              return (\n                <span key={index}>\n                  <ListGroup.Item\n                    style={{ borderColor: msg.flagged ? \"red\" : null }}\n                  >\n                    <Message\n                      entry={msg}\n                      type={type}\n                      deleteHandler={selectHandler}\n                      approveHandler={approveHandler}\n                    />\n                  </ListGroup.Item>\n                  <br />\n                </span>\n              );\n            })\n          : \"No pending messages yet\";\n    }\n  } else if (type === \"approved\") {\n    loadMore = (\n      <LoadMore\n        messages={approvedMessages}\n        filteredMessages={filteredApproved}\n        deleteHandler={selectHandler}\n        approveHandler={approveHandler}\n        type={type}\n      />\n    );\n\n    if (filteredApproved.length > 0) {\n      messages = filteredApproved.slice(0, 14).map((msg, index) => {\n        return (\n          <span key={index}>\n            <ListGroup.Item style={{ borderColor: msg.flagged ? \"red\" : null }}>\n              <Message\n                entry={msg}\n                type={type}\n                deleteHandler={selectHandler}\n                approveHandler={approveHandler}\n              />\n            </ListGroup.Item>\n            <br />\n          </span>\n        );\n      });\n    } else {\n      messages =\n        approvedMessages && approvedMessages.length > 0\n          ? approvedMessages.slice(0, 14).map((msg, index) => {\n              return (\n                <span key={index}>\n                  <ListGroup.Item\n                    style={{ borderColor: msg.flagged ? \"red\" : null }}\n                  >\n                    <Message\n                      entry={msg}\n                      type={type}\n                      deleteHandler={selectHandler}\n                      approveHandler={approveHandler}\n                    />\n                  </ListGroup.Item>\n                  <br />\n                </span>\n              );\n            })\n          : \"No approved messages yet\";\n    }\n  }\n\n  let modalBody = <>Are you sure you want to delete this item?</>;\n\n  return (\n    <>\n      <Modal\n        show={show}\n        itemId={messageId}\n        cancelHandler={resetHandler}\n        acceptHandler={deleteHandler}\n        type={type}\n        title=\"Delete\"\n      >\n        {modalBody}\n      </Modal>\n      <ListGroup>{messages}</ListGroup>\n      {loadMore}\n    </>\n  );\n};\n\nexport default Messages;\n","import React, { useState, useEffect } from \"react\";\nimport styles from \"./SortOption.module.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  addSortPending,\n  removeSortPending,\n  removeSortApproved,\n  addSortApproved,\n} from \"../../../store/actions\";\n\nconst SortOption = (props) => {\n  const [selected, setSelected] = useState(false);\n  const sort = useSelector((state) => state.messages.sort);\n  const dispatch = useDispatch();\n  const { filter, sortHandler, sortSelected, name } = props;\n\n  const selectHandler = (filter) => {\n    setSelected((prevState) => !prevState);\n    sortHandler(filter, name);\n  };\n\n  useEffect(() => {\n    //we need to check to see if the content is filtered-- to determine which array of messages to sort\n    //(the filtered ones, or unfiltered)\n    if (name === \"pending\") {\n      if (!selected && sort === filter) {\n        dispatch(removeSortPending(filter));\n      } else if (selected) {\n        dispatch(addSortPending(filter));\n      }\n    } else {\n      if (!selected && sort === filter) {\n        dispatch(removeSortApproved(filter));\n      } else if (selected) {\n        dispatch(addSortApproved(filter));\n      }\n    }\n  }, [selected]);\n\n  useEffect(() => {\n    if (sortSelected !== filter) {\n      setSelected(false);\n    }\n  }, [sortSelected]);\n\n  return (\n    <div\n      className={selected ? styles.SortOptionSelected : styles.SortOption}\n      onClick={() => selectHandler(filter)}\n    >\n      {props.filter}\n    </div>\n  );\n};\n\nexport default SortOption;\n","import React, { useState } from \"react\";\nimport SortOption from \"./SortOption/SortOption\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faClock } from \"@fortawesome/free-solid-svg-icons\";\nimport Container from \"react-bootstrap/Container\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\n\nconst FilterSortOptions = (props) => {\n  const [pendingSortSelected, setPendingSortSelected] = useState(null);\n  const [approvedSortSelected, setApprovedSortSelected] = useState(null);\n\n  const sortHandler = (filter, type) => {\n    if (type === \"pending\") {\n      if (pendingSortSelected === filter) {\n        setPendingSortSelected(null);\n      } else {\n        setPendingSortSelected(filter);\n      }\n    } else {\n      if (approvedSortSelected === filter) {\n        setApprovedSortSelected(null);\n      } else {\n        setApprovedSortSelected(filter);\n      }\n    }\n  };\n\n  const pendingSortOptions = [\"Newest\", \"Oldest\", \"Flagged\"].map(\n    (type, index, array) => {\n      const sortOption =\n        index === array.length - 1 ? (\n          <SortOption\n            key={index}\n            sortHandler={sortHandler}\n            sortSelected={pendingSortSelected}\n            filter={type}\n            name={\"pending\"}\n          />\n        ) : (\n          <span key={index}>\n            <SortOption\n              key={index}\n              sortHandler={sortHandler}\n              sortSelected={pendingSortSelected}\n              filter={type}\n              name={\"pending\"}\n            />{\" \"}\n            -{\" \"}\n          </span>\n        );\n      return sortOption;\n    }\n  );\n\n  const approvedSortOptions = [\"Newest\", \"Oldest\"].map((type, index, array) => {\n    const sortOption =\n      index === array.length - 1 ? (\n        <SortOption\n          key={index}\n          sortHandler={sortHandler}\n          sortSelected={approvedSortSelected}\n          filter={type}\n          name={\"approved\"}\n        />\n      ) : (\n        <span key={index}>\n          <SortOption\n            sortHandler={sortHandler}\n            sortSelected={approvedSortSelected}\n            filter={type}\n            name={\"approved\"}\n          />{\" \"}\n          -{\" \"}\n        </span>\n      );\n    return sortOption;\n  });\n\n  let optionsBody = null;\n\n  if (props.type === \"pending\") {\n    optionsBody = (\n      <>\n        <FontAwesomeIcon icon={faClock} size=\"1x\" style={{ color: \"gray\" }} />{\" \"}\n        <b>Order By:</b> {pendingSortOptions}\n      </>\n    );\n  } else {\n    optionsBody = (\n      <>\n        <FontAwesomeIcon icon={faClock} size=\"1x\" style={{ color: \"gray\" }} />{\" \"}\n        <b>Order By:</b> {approvedSortOptions}\n      </>\n    );\n  }\n\n  return (\n    <Row>\n      <Col lg={4}>\n        <Container>{optionsBody}</Container>\n      </Col>\n    </Row>\n  );\n};\n\nexport default FilterSortOptions;\n","import React from \"react\";\nimport FilterSortOptions from \"../../components/MessageFilterSortOptions/FilterSortOptions\";\n\nconst FilterSort = (props) => {\n  return (\n    <>\n      <FilterSortOptions type={props.type} />\n    </>\n  );\n};\n\nexport default FilterSort;\n","import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport styles from \"./MessagesPage.module.css\";\nimport Messages from \"../../components/Messages/Messages\";\nimport FilterSort from \"../FilterSort/FilterSort\";\nimport {\n  sortReset,\n  approveMessageReset,\n  deleteMessageReset,\n} from \"../../store/actions\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Container from \"react-bootstrap/Container\";\n\nconst MessagePage = () => {\n  const [messageType, setMessageType] = useState(\"pending\");\n  const approveSuccess = useSelector((state) => state.message.approveSuccess);\n  const deleteSuccess = useSelector((state) => state.message.deleteSuccess);\n  const pendingMessages = useSelector(\n    (state) => state.messages.pendingMessages\n  );\n  const filteredPending = useSelector(\n    (state) => state.messages.filteredPending\n  );\n  const approvedMessages = useSelector(\n    (state) => state.messages.approvedMessages\n  );\n  const filteredApproved = useSelector(\n    (state) => state.messages.filteredApproved\n  );\n  const error = useSelector((state) => state.message.error);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    return () => {\n      dispatch(approveMessageReset());\n      dispatch(deleteMessageReset());\n    };\n  }, [dispatch]);\n\n  const messageTypeHandler = (type) => {\n    setMessageType(type);\n    dispatch(sortReset());\n  };\n\n  let [pendingClasses, allClasses] = [styles.link, styles.link];\n\n  if (messageType === \"pending\") {\n    [pendingClasses, allClasses] = [styles.selected, styles.link];\n  } else if (messageType === \"approved\") {\n    [pendingClasses, allClasses] = [styles.link, styles.selected];\n  }\n\n  return (\n    <Container>\n      <Jumbotron>\n        <center>\n          <h1>Messages</h1>\n          <br />\n          <center>\n            <span\n              className={pendingClasses}\n              onClick={() => messageTypeHandler(\"pending\")}\n            >\n              Pending\n            </span>{\" \"}\n            |{\" \"}\n            <span\n              className={allClasses}\n              onClick={() => messageTypeHandler(\"approved\")}\n            >\n              Approved\n            </span>\n          </center>\n        </center>\n        <br />\n        <FilterSort type={messageType} />\n        <br />\n        <center>\n          <span className={styles.validations}>{error}</span>\n          <span className={styles.success}>\n            {approveSuccess ? \"SUCCESS! Message approved.\" : null}\n            {deleteSuccess ? \"SUCCESS! Message removed.\" : null}\n          </span>\n        </center>\n      </Jumbotron>\n      <Messages\n        pendingMessages={pendingMessages}\n        approvedMessages={approvedMessages}\n        filteredApproved={filteredApproved}\n        filteredPending={filteredPending}\n        type={messageType}\n      />\n    </Container>\n  );\n};\n\nexport default MessagePage;\n"],"sourceRoot":""}